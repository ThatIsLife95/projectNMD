## Server Properties
server:
  port: 5000

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/nmd
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    ## Hibernate Properties
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        # The SQL dialect makes Hibernate generate better SQL for the chosen database
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
    defer-datasource-initialization: true
  sql:
    init:
      mode: always
  jackson:
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false
    time-zone: UTC

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 451879581239-iqt37u5sg426i6nc8rih7dsbln2ub58b.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile

app:
  auth:
    jwtSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    jwtAccessExpirationInMs: 10800000 # 3 hour
    jwtRefreshExpirationInMs: 604800000 # 1 week
  cors:
    allowedOrigins: http://localhost:3000 # Comma separated list of allowed origins
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:5000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect